# Centralized Logging Solution
#
# template for centralized-logging-solution
# this template will deploy sample log sources
#
# author: aws-solutions-builder@
AWSTemplateFormatVersion: 2010-09-09

Description: (SO0009d) - AWS Centralized Logging Solution, sample sources template

Parameters:
  # Log Streamer Function Arn
  LogStreamerArn:
    Description: Lambda Arn for Log Streamer function from primer template
    Type: String

  # VPC CIDR for proxy servers
  DemoVPCCidr:
    Description: CIDR block for VPC
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 10.250.0.0/16
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  # Subnet for proxy web server
  DemoSubnet:
    Description: IP address range for subnet
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 10.250.250.0/24
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network Configuration
      Parameters:
      - DemoVPCCidr
      - DemoSubnet
    ParameterLabels:
      DemoVPCCidr:
        default: VPC for Sample Log Sources
      DemoSubnet:
        default: Subnet for Sample Web Server
      LogStreamerArn:
        default: Lambda Arn for Log Streaming

Mappings:
  # Instance mapping for different regions
  InstanceMap:
    t2.micro: {"Arch":"HVM64"}
    us-east-1: {"instancetype":"t2.micro"}
    us-east-2: {"instancetype":"t2.micro"}
    us-west-1: {"instancetype":"t2.micro"}
    us-west-2: {"instancetype":"t2.micro"}
    ca-central-1: {"instancetype":"t2.micro"}
    eu-west-1: {"instancetype":"t2.micro"}
    eu-central-1: {"instancetype":"t2.micro"}
    eu-west-2: {"instancetype":"t2.micro"}
    eu-west-3: {"instancetype":"t2.micro"}
    ap-southeast-1: {"instancetype":"t2.micro"}
    ap-southeast-2: {"instancetype":"t2.micro"}
    ap-northeast-1: {"instancetype":"t2.micro"}
    ap-northeast-2: {"instancetype":"t2.micro"}
    ap-south-1: {"instancetype":"t2.micro"}
    sa-east-1: {"instancetype":"t2.micro"}

  # CloudWatch logs pattern mapping
  FilterPatternLookup:
    Common:
      Pattern: '[host, ident, authuser, date, request, status, bytes, referrer, agent]'
    CloudTrail:
      Pattern: ''
    FlowLogs:
      Pattern: '[version, account_id, interface_id, srcaddr != "-", dstaddr != "-", srcport != "-", dstport != "-", protocol, packets, bytes, start, end, action, log_status]'
    Lambda:
      Pattern: '[level, timestamp=*Z, request_id="*-*", event]'
    SpaceDelimited:
      Pattern: '[]'
    Other:
      Pattern: ''

  # Lambda source code mapping
  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      KeyPrefix: "centralized-logging/latest"

Resources:
  #
  # Demo VPC resources
  # [DemoVPC, PublicSubnet, InternetGateway, GatewayAttachment, PublicRtb, PublicRoute, SubnetRtbAssoc]
  #
  DemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub ${DemoVPCCidr}
      Tags:
      - Key: Name
        Value: centralized-logging-demo VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Sub ${DemoVPC}
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Sub ${DemoSubnet}
      Tags:
      - Key: Name
        Value: centralized-logging-demo subnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Sub ${DemoVPC}
      InternetGatewayId: !Sub ${InternetGateway}

  PublicRtb:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Sub ${DemoVPC}

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Sub ${PublicRtb}
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Sub ${InternetGateway}

  SubnetRtbAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Sub ${PublicSubnet}
      RouteTableId: !Sub ${PublicRtb}


  #
  # VPC flow log resources
  # [VPCFlowLogGroup, FlowlogsRole, VPCFlowLog, VPCFlowLogtoLambda]
  #
  VPCFlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1

  FlowlogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - vpc-flow-logs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LogRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !Sub ${FlowlogsRole.Arn}
      LogGroupName: !Sub ${VPCFlowLogGroup}
      ResourceId: !Sub ${DemoVPC}
      ResourceType: VPC
      TrafficType: ALL

  VPCFlowLogtoLambda:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub ${LogStreamerArn}
      FilterPattern: !FindInMap [FilterPatternLookup, FlowLogs, Pattern]
      LogGroupName: !Sub ${VPCFlowLogGroup}


  #
  # CloudTrail resources
  # [TrailBucket, TrailBucketPolicy, TrailLogGroup, TrailLogGroupRole, TrailLogtoLambda]
  #
  TrailBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket

  TrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub ${TrailBucket}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: s3:GetBucketAcl
          Resource: !Sub arn:aws:s3:::${TrailBucket}
        - Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: s3:PutObject
          Resource: !Sub arn:aws:s3:::${TrailBucket}/AWSLogs/${AWS::AccountId}/*
          Condition:
            StringEquals:
              s3:x-amz-acl: bucket-owner-full-control

  TrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1

  TrailLogGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: cloudtrail-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub ${TrailLogGroup.Arn}

  Trail:
    Type: AWS::CloudTrail::Trail
    Properties:
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: false
      S3BucketName: !Sub ${TrailBucket}
      CloudWatchLogsLogGroupArn: !Sub ${TrailLogGroup.Arn}
      CloudWatchLogsRoleArn: !Sub ${TrailLogGroupRole.Arn}
    DependsOn: TrailBucketPolicy

  TrailLogtoLambda:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub ${LogStreamerArn}
      FilterPattern: !FindInMap
        - FilterPatternLookup
        - CloudTrail
        - Pattern
      LogGroupName: !Sub ${TrailLogGroup}

  #
  # WebServer log resources
  # [EC2LogRole, InstanceProfile, WebServerSecurityGroup, WebServerSecurityGroupIngress, WebServerLogtoLambda]
  #
  EC2LogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LogRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
              - logs:Create*
              - logs:PutLogEvents
              - s3:GetObject
              Resource:
              - !Sub ${WebServerLogGroup.Arn}
              - arn:aws:s3:::*

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Sub ${EC2LogRole}

  WebServerHost:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install a simple PHP application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /tmp/cwlogs/apacheaccess.conf:
              content: !Join
                - ''
                - - |
                    [general]
                  - |
                    state_file= /var/awslogs/agent-state
                  - |
                    [/var/log/httpd/access_log]
                  - |
                    file = /var/log/httpd/access_log
                  - 'log_group_name = '
                  - !Ref WebServerLogGroup
                  - |+

                  - |
                    log_stream_name = {instance_id}/apache.log
                  - 'datetime_format = %d/%b/%Y:%H:%M:%S'
              mode: '000400'
              owner: apache
              group: apache
            /var/www/html/index.php:
              content: !Join
                - ''
                - - |
                    <?php
                  - |
                    echo '<h1>AWS CloudFormation sample PHP application</h1>';
                  - |
                    ?>
              mode: '000644'
              owner: apache
              group: apache
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -s '
                  - !Ref 'AWS::StackId'
                  - ' -r WebServerHost '
                  - ' --region     '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              sendmail:
                enabled: 'false'
                ensureRunning: 'false'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      ImageId: !Sub ${AMIInfo.Id}
      Tags:
      - Key: Name
        Value: Web Server centralized-logging-demo
      NetworkInterfaces:
      - GroupSet:
        - !Sub ${WebServerSecurityGroup}
        AssociatePublicIpAddress: true
        DeviceIndex: 0
        DeleteOnTermination: true
        SubnetId: !Sub ${PublicSubnet}
      InstanceType: !FindInMap [InstanceMap, !Ref "AWS::Region", "instancetype"]
      IamInstanceProfile: !Sub ${InstanceProfile}
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              # Get the latest CloudFormation package
            - |
              yum update -y aws-cfn-bootstrap
            - |
              # Start cfn-init
            - '/opt/aws/bin/cfn-init -s '
            - !Ref 'AWS::StackId'
            - ' -r WebServerHost '
            - ' --region '
            - !Ref 'AWS::Region'
            - |2
               || error_exit 'Failed to run cfn-init'
            - >
              # Start up the cfn-hup daemon to listen for changes to the EC2
              instance metadata
            - |
              /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            - |
              # Get the CloudWatch Logs agent
            - >
              wget
              https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
            - |
              # Install the CloudWatch Logs agent
            - 'python awslogs-agent-setup.py -n -r '
            - !Ref 'AWS::Region'
            - |2
               -c /tmp/cwlogs/apacheaccess.conf || error_exit 'Failed to run CloudWatch Logs agent setup'
            - |
              # pre-warm the apache logs
            - |
              curl 127.0.0.1
            - |
              curl 127.0.0.1/404
            - |
              # All done so signal success
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerHost '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  WebServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      VpcId: !Sub ${DemoVPC}

  WebServerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Sub ${WebServerSecurityGroup}
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  WebServerLogtoLambda:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub ${LogStreamerArn}
      FilterPattern: !FindInMap [FilterPatternLookup, Common, Pattern]
      LogGroupName: !Sub ${WebServerLogGroup}


  #
  # Solution Helper resources
  # [AMIInfoFunction, AMIInfo, SolutionHelperRole]
  #
  AMIInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "clog-ami-lookup.zip"]]
      Handler: amilookup.handler
      Runtime: nodejs4.3
      Timeout: 300
      Description: This function is CloudFormation custom lambda resource that looks up the latest AMI ID.
      Role: !Sub ${SolutionHelperRole.Arn}

  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken: !GetAtt AMIInfoFunction.Arn
      Region: !Ref "AWS::Region"
      Architecture: !FindInMap [InstanceMap, !FindInMap [InstanceMap, !Ref "AWS::Region", "instancetype"], "Arch"]

  SolutionHelperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Custom_Lambda_Loader_Permissions
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            Resource: "*"

Outputs:
  PublicIP:
    Description: Public IP of sample web server
    Value: !Sub http://${WebServerHost.PublicIp}
