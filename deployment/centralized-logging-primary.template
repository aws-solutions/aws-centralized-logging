# Centralized Logging Solution
#
# template for centralized-logging-solution
# **DO NOT DELETE**
#
# author: aws-solutions-builder@
AWSTemplateFormatVersion: 2010-09-09

Description: (SO0009) - AWS Centralized Logging Solution, primary template (Version %%VERSION%%)

Parameters:
  # Name for ES Domain
  DOMAINNAME:
    Description: Name for the Amazon ES domain that this template will create. Domain names must start with a lowercase letter and must be between 3 and 28 characters. Valid characters are a-z (lowercase only), 0-9.
    Type: String
    Default: centralizedlogging

  # Email address for the Elasticsearch domain admin
  DomainAdminEmail:
    Type: String
    AllowedPattern: '^[_A-Za-z0-9-\+\.]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$'
    Description: E-mail address of the Elasticsearch admin

  # Email address for Cognito Admin user
  CognitoAdminEmail:
    Type: String
    AllowedPattern: '^[_A-Za-z0-9-\+\.]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$'
    Description: E-mail address of the Cognito admin

  # ES cluster size
  ClusterSize:
    Description: Amazon ES cluster size; small (4 data nodes), medium (6 data nodes), large (6 data nodes)
    Type: String
    Default: Small
    AllowedValues:
    - Small
    - Medium
    - Large

  # Demo template for sample logs
  DemoTemplate:
    Description: Deploy template for sample data and logs?
    Type: String
    Default: 'No'
    AllowedValues:
    - 'Yes'
    - 'No'

  # Spoke accounts which would use the same ES
  SpokeAccounts:
    Description: Account IDs which you want to allow for centralized logging (comma separated list eg. 11111111,22222222)
    Type: CommaDelimitedList

  # VPC CIDR for sample sources
  DemoVPC:
    Description: CIDR for VPC with sample sources (Only required if you chose 'Yes' above)
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 10.250.0.0/16
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  # Subnet for sample web server
  DemoSubnet:
    Description: IP address range for subnet with sample web server (Only required if you chose 'Yes' above)
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 10.250.250.0/24
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Elasticsearch Configuration
      Parameters:
      - DOMAINNAME
      - DomainAdminEmail
      - ClusterSize
      - SpokeAccounts
    - Label:
        default: Cognito Configuration
      Parameters:
      - CognitoAdminEmail
    - Label:
        default: Do you want to deploy sample log sources?
      Parameters:
      - DemoTemplate
      - DemoVPC
      - DemoSubnet
    ParameterLabels:
      CognitoAdminEmail:
        default: Cognito Admin email address
      DomainAdminEmail:
        default: Elasticsearch Domain Admin email address
      DOMAINNAME:
        default: Elasticsearch Domain name
      ClusterSize:
        default: Cluster Size
      DemoTemplate:
        default: Sample Logs
      SpokeAccounts:
        default: Spoke Accounts
      DemoVPC:
        default: VPC CIDR for Sample Sources
      DemoSubnet:
        default: Subnet for Sample Web Server

Mappings:
  InstanceMap:
    send-data: {"SendAnonymousData": "Yes"}

  ElasticSearch:
    Parameters:
      Version: '7.4'
    NodeCount:
      Small: '4'
      Medium: '6'
      Large: '6'
    MasterSize:
      Small: c5.large.elasticsearch
      Medium: c5.large.elasticsearch
      Large: c5.large.elasticsearch
    InstanceSize:
      Small: i3.large.elasticsearch
      Medium: i3.2xlarge.elasticsearch
      Large: i3.4xlarge.elasticsearch

  # Lambda source code mapping
  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"

Conditions:
  DemoData: !Equals [!Ref DemoTemplate, 'Yes']
  SingleAccnt: !Equals [!Select [ 0, !Ref SpokeAccounts ], '']

Resources:
  #
  # Cognito and IAM
  #
  # Creates a user pool in cognito to auth against
  UserPool:
    DeletionPolicy: 'Retain'
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub ${DOMAINNAME}_kibana_access
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: 'OFF'
      EmailVerificationSubject: !Ref AWS::StackName
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  # Custom resource to configure Cognito and ES
  SetupESCognito:
    DependsOn: 
      - 'ElasticsearchAWSLogs'
      - 'UserPoolDomain'
    Type: 'Custom::SetupESCognito'
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt LambdaESCognito.Arn
      Domain: !Ref DOMAINNAME
      CognitoDomain: !Sub ${DOMAINNAME}-${AWS::AccountId}
      UserPoolId: !Ref UserPool
      IdentityPoolId: !Ref IdentityPool
      RoleArn: !GetAtt CognitoESAccessRole.Arn

  UserPoolDomain:
    DeletionPolicy: 'Retain'
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      Domain: !Sub ${DOMAINNAME}-${AWS::AccountId}
      UserPoolId: !Ref UserPool

  # Creates a group in Cognito for Kibana ADMIN access
  UserPoolGroup:
    DeletionPolicy: 'Retain'
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      Description: 'User pool group for Kibana full access'
      GroupName: !Sub ${DOMAINNAME}_kibana_admin
      Precedence: 0
      UserPoolId: !Ref UserPool
      RoleArn: !GetAtt CognitoAuthorizedRole.Arn

  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    DeletionPolicy: 'Retain'
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Sub ${DOMAINNAME}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  # Creates a federated Identity pool
  IdentityPool:
    DeletionPolicy: 'Retain'
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: !Sub ${DOMAINNAME}Identity
      AllowUnauthenticatedIdentities: false # Prevent anonymous access
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
          ServerSideTokenCheck: true

  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    DeletionPolicy: 'Retain'
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn

  CognitoAuthorizedRole:
    DeletionPolicy: 'Retain'
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 
                  - 'es:ESHttp*'
                Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${DOMAINNAME}/*'

  # Policy passed to the ES API to execute updateElasticsearchDomainConfig
  CognitoESAccessPolicy:
    Type: 'AWS::IAM::Policy'
    DeletionPolicy: 'Retain'
    Properties:
      PolicyName: 'CentralizedLoggingESCognitoAccess'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ESCognitoPerms
            Effect: Allow
            Action:
              - 'cognito-idp:DescribeUserPool'
              - 'cognito-idp:CreateUserPoolClient'
              - 'cognito-idp:DeleteUserPoolClient'
              - 'cognito-idp:DescribeUserPoolClient'
              - 'cognito-idp:AdminInitiateAuth'
              - 'cognito-idp:AdminUserGlobalSignOut'
              - 'cognito-idp:ListUserPoolClients'
              - 'cognito-identity:DescribeIdentityPool'
              - 'cognito-identity:UpdateIdentityPool'
              - 'cognito-identity:SetIdentityPoolRoles'
              - 'cognito-identity:GetIdentityPoolRoles'
              - 'es:UpdateElasticsearchDomainConfig'
            Resource: 
              - !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}'
              - !Sub 'arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${IdentityPool}'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${DOMAINNAME}'
          - Sid: 'PassRole'
            Effect: 'Allow'
            Action: 'iam:PassRole'
            Condition:
              StringLike: 
                'iam:PassedToService': 'cognito-identity.amazonaws.com'
            Resource: !GetAtt CognitoESAccessRole.Arn
      Roles: 
        - !Ref CognitoESAccessRole

  # with CognitoESAcessPolicy above
  CognitoESAccessRole:
    Type: 'AWS::IAM::Role'
    DeletionPolicy: 'Retain'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'es.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  # Create initial cognito user
  AdminUser:
    Type: 'AWS::Cognito::UserPoolUser'
    DeletionPolicy: 'Retain'
    Properties:
      DesiredDeliveryMediums:
        - 'EMAIL'
      UserAttributes:
        - Name: email
          Value: !Ref CognitoAdminEmail
      Username: !Ref CognitoAdminEmail
      UserPoolId: !Ref UserPool

  # Place user in UserPoolGroup
  CognitoUserGroupAttachment:
    Type: 'AWS::Cognito::UserPoolUserToGroupAttachment'
    Properties:
      GroupName: !Ref UserPoolGroup
      Username: !Ref CognitoAdminEmail
      UserPoolId: !Ref UserPool

  LambdaESCognito:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Centralized Logging - Lambda solution helper functions
      Environment:
        Variables:
          # V56536055 - 10/08/2018 - better logging capabilities
          LOG_LEVEL: 'INFO' #change to WARN, ERROR or DEBUG as needed
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 300
      Role: !GetAtt LambdaESCognitoRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "clog-auth.zip"]]

  LambdaESCognitoRole:
    Type: AWS::IAM::Role
    DependsOn: ElasticsearchAWSLogs
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - es:UpdateElasticsearchDomainConfig
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${DOMAINNAME}'
          - Effect: Allow
            Action:
            - cognito-idp:CreateUserPoolDomain
            - cognito-idp:DeleteUserPoolDomain
            Resource: !GetAtt UserPool.Arn
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource: !GetAtt CognitoESAccessRole.Arn
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "CloudWatch Logs captures logs from various resources and hence it is open"

  #
  # Primer Elasticsearch resources
  # [LoggingMasterRole, LoggingMasterPolicies, ElasticsearchAWSLogs]
  #
  LoggingMasterRole:
    DeletionPolicy: 'Retain'
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              Fn::If:
                - SingleAccnt
                - Ref: AWS::AccountId
                - Ref: SpokeAccounts
            Service: lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  LoggingMasterPolicies:
    DeletionPolicy: 'Retain' 
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub logging-master-${AWS::Region}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - es:ESHttpPost
          Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
      Roles:
      - !Ref LoggingMasterRole
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: "Allow resources to hit ES domains"

  ElasticsearchAWSLogs:
    Type: AWS::Elasticsearch::Domain
    DeletionPolicy: 'Retain'
    Properties:
      DomainName: !Ref DOMAINNAME
      ElasticsearchVersion: !FindInMap [ElasticSearch, Parameters, Version]
      # V5804310 - 10/09/2018 - ES Encryption at rest
      EncryptionAtRestOptions:
        Enabled: true
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: true
        InstanceCount: !FindInMap [ElasticSearch, NodeCount, !Ref ClusterSize]
        ZoneAwarenessEnabled: true
        InstanceType: !FindInMap [ElasticSearch, InstanceSize, !Ref ClusterSize]
        DedicatedMasterType: !FindInMap [ElasticSearch, MasterSize, !Ref ClusterSize]
        DedicatedMasterCount: 3
      SnapshotOptions:
        AutomatedSnapshotStartHour: '1'
      AccessPolicies:
        Version: 2012-10-17
        Statement:
        - Action: 'es:ESHttp*'
          Principal:
            AWS: !Sub ${LoggingMasterRole.Arn}
          Effect: Allow
          Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${DOMAINNAME}/*'
        - Action: 'es:ESHttp*'
          Principal:
            AWS: !Sub
              - arn:aws:sts::${AWS::AccountId}:assumed-role/${AuthRole}/CognitoIdentityCredentials
              - { AuthRole: !Ref CognitoAuthorizedRole }
          Effect: Allow
          Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${DOMAINNAME}/*'
      # V57095985 - 10/08/2018 - ES Domain needed configurations
      # https://github.com/awslabs/aws-centralized-logging/issues/2
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: 'true'
        indices.fielddata.cache.size: 40
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "The ES Domain is passed dynamically as as parameter and explicitly specified to ensure that IAM policies are configured to lockdown access to this specific ES instance only"

  #
  # SNS Topic
  #
  Topic:
    Type: 'AWS::SNS::Topic'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W47
            reason: "Suppressing latest warning"
    Properties:
      DisplayName: 'Centralized Logging CloudWatch alarms notification topic'

  TopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: Id1
        Version: '2012-10-17'
        Statement:
        - Sid: Sid1
          Effect: Allow
          Principal:
            AWS: !Sub '${AWS::AccountId}' # Allow CloudWatch Alarms
          Action: 'sns:Publish'
          Resource: '*'
      Topics:
      - !Ref Topic

  TopicEndpointSubscription:
    DependsOn: TopicPolicy
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref DomainAdminEmail
      Protocol: email
      TopicArn: !Ref Topic

  #
  # CloudWatch Alarms
  #

  StatusYellowAlarm:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Replica shards for at least one index are not allocated to nodes in a cluster.'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: ClientId
        Value: !Ref 'AWS::AccountId'
      - Name: DomainName
        Value: !Ref DOMAINNAME
      EvaluationPeriods: 1
      MetricName: 'ClusterStatus.yellow'
      Namespace: 'AWS/ES'
      OKActions:
      - !Ref Topic
      Period: 60
      Statistic: Maximum
      Threshold: 1

  StatusRedAlarm:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Primary and replica shards of at least one index are not allocated to nodes in a cluster.'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: ClientId
        Value: !Ref 'AWS::AccountId'
      - Name: DomainName
        Value: !Ref DOMAINNAME
      EvaluationPeriods: 1
      MetricName: 'ClusterStatus.red'
      Namespace: 'AWS/ES'
      OKActions:
      - !Ref Topic
      Period: 60
      Statistic: Maximum
      Threshold: 1

  CPUUtilizationTooHighAlarm:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Average CPU utilization over last 45 minutes too high.'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: ClientId
        Value: !Ref 'AWS::AccountId'
      - Name: DomainName
        Value: !Ref DOMAINNAME
      EvaluationPeriods: 3
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/ES'
      OKActions:
      - !Ref Topic
      Period: 900
      Statistic: Average
      Threshold: 80

  MasterCPUUtilizationTooHighAlarm:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Average CPU utilization over last 45 minutes too high.'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: ClientId
        Value: !Ref 'AWS::AccountId'
      - Name: DomainName
        Value: !Ref DOMAINNAME
      EvaluationPeriods: 3
      MetricName: 'MasterCPUUtilization'
      Namespace: 'AWS/ES'
      OKActions:
      - !Ref Topic
      Period: 900
      Statistic: Average
      Threshold: 50

  FreeStorageSpaceTooLowAlarm:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Cluster has less than 2GB of storage space.'
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
      - Name: ClientId
        Value: !Ref 'AWS::AccountId'
      - Name: DomainName
        Value: !Ref DOMAINNAME
      EvaluationPeriods: 1
      MetricName: 'FreeStorageSpace'
      Namespace: 'AWS/ES'
      OKActions:
      - !Ref Topic
      Period: 60
      Statistic: Minimum
      Threshold: 2000

  IndexWritesBlockedTooHighAlarm:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Cluster is blocking incoming write requests.'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: ClientId
        Value: !Ref 'AWS::AccountId'
      - Name: DomainName
        Value: !Ref DOMAINNAME
      EvaluationPeriods: 1
      MetricName: 'ClusterIndexWritesBlocked'
      Namespace: 'AWS/ES'
      OKActions:
      - !Ref Topic
      Period: 300
      Statistic: Maximum
      Threshold: 1

  JVMMemoryPressureTooHighAlarm:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Average JVM memory pressure over last 15 minutes too high.'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: ClientId
        Value: !Ref 'AWS::AccountId'
      - Name: DomainName
        Value: !Ref DOMAINNAME
      EvaluationPeriods: 1
      MetricName: 'JVMMemoryPressure'
      Namespace: 'AWS/ES'
      OKActions:
      - !Ref Topic
      Period: 900
      Statistic: Average
      Threshold: 80

  MasterJVMMemoryPressureTooHighAlarm:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Average JVM memory pressure over last 15 minutes too high.'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: ClientId
        Value: !Ref 'AWS::AccountId'
      - Name: DomainName
        Value: !Ref DOMAINNAME
      EvaluationPeriods: 1
      MetricName: 'MasterJVMMemoryPressure'
      Namespace: 'AWS/ES'
      OKActions:
      - !Ref Topic
      Period: 900
      Statistic: Average
      Threshold: 50

  MasterNotReachableFromNodeAlarm:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'Master node stopped or not reachable. Usually the result of a network connectivity issue or AWS dependency problem.'
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: ClientId
        Value: !Ref 'AWS::AccountId'
      - Name: DomainName
        Value: !Ref DOMAINNAME
      EvaluationPeriods: 1
      MetricName: 'MasterReachableFromNode'
      Namespace: 'AWS/ES'
      OKActions:
      - !Ref Topic
      Period: 60
      Statistic: Minimum
      Threshold: 1

  AutomatedSnapshotFailureTooHighAlarm:
    DependsOn: TopicEndpointSubscription
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - !Ref Topic
      AlarmDescription: 'No automated snapshot was taken for the domain in the previous 36 hours (created by marbot).'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: ClientId
        Value: !Ref 'AWS::AccountId'
      - Name: DomainName
        Value: !Ref DOMAINNAME
      EvaluationPeriods: 1
      MetricName: 'AutomatedSnapshotFailure'
      Namespace: 'AWS/ES'
      OKActions:
      - !Ref Topic
      Period: 60
      Statistic: Maximum
      Threshold: 1

  #
  # Log Streamer and Demo resources
  # [LogStreamerRole, LogStreamer, LogStreamerInvokePermission, DemoStack]
  #
  LogStreamerRole:
    DeletionPolicy: 'Retain'
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub logstreamer-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
            - Effect: Allow
              Action:
              - es:ESHttpPost
              Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The resource for log-group is restricted to lambda functions. The name of the fuction is not specified because if specified any change to lambda function would require replacement"


  LogStreamer:
    Type: AWS::Lambda::Function
    Properties:
      Description: Centralized Logging - Lambda function to stream logs on ES Domain
      Environment:
        Variables:
          # V56536055 - 10/08/2018 - better logging capabilities
          LOG_LEVEL: 'INFO' #change to WARN, ERROR or DEBUG as needed
          DOMAIN_ENDPOINT: !Sub ${ElasticsearchAWSLogs.DomainEndpoint}
          MASTER_ROLE: !Sub ${LoggingMasterRole}
          SESSION_ID: !Sub ${AWS::AccountId}-${AWS::Region}
          OWNER: Hub
          SOLUTION: SO0009
          CLUSTER_SIZE: !Ref ClusterSize
          UUID: !Sub ${CreateUniqueID.UUID}
          ANONYMOUS_DATA: !FindInMap [InstanceMap, send-data, SendAnonymousData]
      Handler: index.handler
      Role: !Sub ${LogStreamerRole.Arn}
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "clog-indexing-service.zip"]]
      Runtime: nodejs12.x
      Timeout: 300

  LogStreamerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${LogStreamer}
      Action: lambda:InvokeFunction
      Principal: !Sub logs.${AWS::Region}.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}

  DemoStack:
    Type: AWS::CloudFormation::Stack
    Condition: DemoData
    Properties:
      Parameters:
        LogStreamerArn: !Sub ${LogStreamer.Arn}
        DemoVPCCidr: !Sub ${DemoVPC}
        DemoSubnet: !Sub ${DemoSubnet}
      TemplateURL: !Join 
        - ''
        - - 'https://'
          - !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], "reference"]]
          - '.s3.amazonaws.com/'
          - !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "centralized-logging-demo.template"]]

  CreateUniqueID:
    Type: Custom::LoadLambda
    Properties:
      ServiceToken: !GetAtt LambdaESCognito.Arn
      Resource: UUID

Outputs:
  DomainEndpoint:
    Description: ES domain endpoint URL
    Value: !Sub ${ElasticsearchAWSLogs.DomainEndpoint}

  KibanaLoginURL:
    Description: Kibana login URL
    Value: !Sub https://${ElasticsearchAWSLogs.DomainEndpoint}/_plugin/kibana/

  MasterRole:
    Description: IAM role for ES cross account access
    Value: !Sub ${LoggingMasterRole.Arn}

  SpokeAccountIds:
    Description: Accounts that are allowed to index on ES
    Value: !Join [ ',', !Ref SpokeAccounts]

  LambdaArn:
    Description: Lambda function to index logs on ES Domain
    Value: !Sub ${LogStreamer.Arn}

  ClusterSize:
    Description: Cluster size for the deployed ES Domain
    Value: !Sub ${ClusterSize}
